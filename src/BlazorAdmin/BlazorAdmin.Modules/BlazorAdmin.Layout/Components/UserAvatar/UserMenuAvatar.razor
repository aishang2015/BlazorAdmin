@using BlazorAdmin.Layout.Components.UserAvatar.Dialogs
@using BlazorAdmin.Servers.Core.Helper
@using BlazorAdmin.Servers.Core.States

@rendermode InteractiveServer

<MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Dense="true"
         AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopRight">
    <ActivatorContent>
        @if (string.IsNullOrEmpty(_avatar))
        {
            <MudAvatar Size="Size.Small" Color=" Color.Primary">
                @_userName.First()
            </MudAvatar>
        }
        else
        {
            <MudAvatar Size="Size.Small">
                <MudImage Src="@("Avatars/" + _avatar)"></MudImage>
            </MudAvatar>
        }
    </ActivatorContent>
    <ChildContent>
        <MudContainer Class="d-flex flex-column pa-1" Style="width:180px;">
            <MudContainer Class="d-flex flex-column align-center justify-center my-3">
                <MudText Typo="Typo.subtitle1" Style="max-width:160px;white-space: nowrap;overflow: hidden;text-overflow: ellipsis;">
                    @_userName
                </MudText>
            </MudContainer>
            <MudDivider Class="mb-2" />
            <MudMenuItem Icon="@Icons.Material.Filled.Settings" OnClick="ShowUserSettings">
                @Loc["AuthorizedLayout_Setting"]
            </MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Filled.Logout" OnClick="LogoutClick">
                @Loc["AuthorizedLayout_Logout"]
            </MudMenuItem>
        </MudContainer>
    </ChildContent>
</MudMenu>

@code {


    string _userName = string.Empty;

    string? _avatar = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        var currentUri = _navManager.Uri.Substring(_navManager.BaseUri.Length - 1);
        if (currentUri.Contains('?'))
        {
            currentUri = currentUri.Substring(0, currentUri.IndexOf('?'));
        }

        var couldAccess = await _accessService.CheckUriCanAccess(currentUri);
        if (!couldAccess)
        {
            _navManager.NavigateTo("/noauthorized");
        }
        else
        {
            var userId = await _stateProvider.GetUserIdAsync();
            using var context = await _dbFactory.CreateDbContextAsync();
            var userInfo = context.Users.Find(userId);
            _userName = userInfo.RealName;
            _avatar = userInfo.Avatar;
        }
    }

    private async Task ShowUserSettings()
    {
        var parameters = new DialogParameters { };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge, NoHeader = true };
        var dialog = await _dialogService.ShowAsync<ProfileSetting>(string.Empty, parameters, options);
        var result = await dialog.Result;

        using var context = await _dbFactory.CreateDbContextAsync();
        var userId = await _stateProvider.GetUserIdAsync();
        var userInfo = context.Users.Find(userId);
        _userName = userInfo.RealName;
        _avatar = userInfo.Avatar;
        StateHasChanged();
    }

    private async Task LogoutClick()
    {
        var cookieUtil = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/cookieUtil.js");
        await cookieUtil.InvokeVoidAsync("setCookie", CommonConstant.UserToken, string.Empty);

        _navManager.NavigateTo("/login", true);
    }
}